// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using patools.Models;

namespace patools.Migrations
{
    [DbContext(typeof(PAToolsContext))]
    [Migration("20211208171412_Added submission and answer")]
    partial class Addedsubmissionandanswer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("patools.Models.Answer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Grade")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("QuestionID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SubmissionID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("SubmissionID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("patools.Models.Course", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeacherID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("patools.Models.CourseUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("UserID");

                    b.ToTable("CourseUsers");
                });

            modelBuilder.Entity("patools.Models.Group", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("patools.Models.GroupUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GroupID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StudentID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Subgroup")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("StudentID");

                    b.ToTable("GroupUsers");
                });

            modelBuilder.Entity("patools.Models.Question", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RespondentType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TaskID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("TaskID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("patools.Models.Submission", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TaskUserAssignmentID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("TaskUserAssignmentID");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("patools.Models.Task", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReviewEndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReviewStartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SubmissionEndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SubmissionStartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubmissionsToCheck")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("patools.Models.TaskUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("StudentID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TaskID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TaskID");

                    b.ToTable("TaskUsers");
                });

            modelBuilder.Entity("patools.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("patools.Models.Variant", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("QuestionID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("patools.Models.Answer", b =>
                {
                    b.HasOne("patools.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID");

                    b.HasOne("patools.Models.Submission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionID");

                    b.Navigation("Question");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("patools.Models.Course", b =>
                {
                    b.HasOne("patools.Models.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherID");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("patools.Models.CourseUser", b =>
                {
                    b.HasOne("patools.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID");

                    b.HasOne("patools.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("patools.Models.GroupUser", b =>
                {
                    b.HasOne("patools.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("patools.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID");

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("patools.Models.Question", b =>
                {
                    b.HasOne("patools.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("patools.Models.Submission", b =>
                {
                    b.HasOne("patools.Models.TaskUser", "TaskUserAssignment")
                        .WithMany()
                        .HasForeignKey("TaskUserAssignmentID");

                    b.Navigation("TaskUserAssignment");
                });

            modelBuilder.Entity("patools.Models.Task", b =>
                {
                    b.HasOne("patools.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("patools.Models.TaskUser", b =>
                {
                    b.HasOne("patools.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID");

                    b.HasOne("patools.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID");

                    b.Navigation("Student");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("patools.Models.Variant", b =>
                {
                    b.HasOne("patools.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID");

                    b.Navigation("Question");
                });
#pragma warning restore 612, 618
        }
    }
}
