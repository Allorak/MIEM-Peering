// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using patools.Models;

namespace patools.Migrations
{
    [DbContext(typeof(PAToolsContext))]
    [Migration("20220306212751_Added lti checks for user")]
    partial class Addedltichecksforuser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("patools.Models.Answer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("QuestionID")
                        .HasColumnType("uuid");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReviewID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubmissionID")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("ReviewID");

                    b.HasIndex("SubmissionID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("patools.Models.Course", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CourseCode")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCode")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeacherID")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("patools.Models.CourseUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("ConfidenceFactor")
                        .HasColumnType("real");

                    b.Property<Guid?>("CourseID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("UserID");

                    b.ToTable("CourseUsers");
                });

            modelBuilder.Entity("patools.Models.Expert", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PeeringTaskID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("PeeringTaskID");

                    b.HasIndex("UserID");

                    b.ToTable("Experts");
                });

            modelBuilder.Entity("patools.Models.Group", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("ID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("patools.Models.GroupUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StudentID")
                        .HasColumnType("uuid");

                    b.Property<int>("Subgroup")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("StudentID");

                    b.ToTable("GroupUsers");
                });

            modelBuilder.Entity("patools.Models.PeeringTask", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("BadConfidencePenalty")
                        .HasColumnType("real");

                    b.Property<string>("ConsumerKey")
                        .HasColumnType("text");

                    b.Property<Guid?>("CourseID")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("ExpertsAssigned")
                        .HasColumnType("boolean");

                    b.Property<float?>("GoodConfidenceBonus")
                        .HasColumnType("real");

                    b.Property<bool>("LtiEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("LtiTaskId")
                        .HasColumnType("integer");

                    b.Property<bool>("PeersAssigned")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ReviewEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ReviewStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReviewType")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewWeight")
                        .HasColumnType("integer");

                    b.Property<string>("SharedSecret")
                        .HasColumnType("text");

                    b.Property<DateTime>("SubmissionEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SubmissionStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SubmissionWeight")
                        .HasColumnType("integer");

                    b.Property<int>("SubmissionsToCheck")
                        .HasColumnType("integer");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("patools.Models.PeeringTaskUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("FinalGrade")
                        .HasColumnType("real");

                    b.Property<bool>("JoinedByLti")
                        .HasColumnType("boolean");

                    b.Property<float?>("NextConfidenceFactor")
                        .HasColumnType("real");

                    b.Property<Guid?>("PeeringTaskID")
                        .HasColumnType("uuid");

                    b.Property<float>("PreviousConfidenceFactor")
                        .HasColumnType("real");

                    b.Property<bool>("ReceivedLtiGrade")
                        .HasColumnType("boolean");

                    b.Property<float?>("ReviewGrade")
                        .HasColumnType("real");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StudentID")
                        .HasColumnType("uuid");

                    b.Property<float?>("SubmissionGrade")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("PeeringTaskID");

                    b.HasIndex("StudentID");

                    b.ToTable("TaskUsers");
                });

            modelBuilder.Entity("patools.Models.Question", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("CoefficientPercentage")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<int?>("MinValue")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PeeringTaskID")
                        .HasColumnType("uuid");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<int>("RespondentType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("PeeringTaskID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("patools.Models.Review", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Grade")
                        .HasColumnType("real");

                    b.Property<Guid?>("SubmissionPeerAssignmentID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("SubmissionPeerAssignmentID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("patools.Models.Submission", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PeeringTaskUserAssignmentID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("PeeringTaskUserAssignmentID");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("patools.Models.SubmissionPeer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PeerID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubmissionID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("PeerID");

                    b.HasIndex("SubmissionID");

                    b.ToTable("SubmissionPeers");
                });

            modelBuilder.Entity("patools.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("patools.Models.Variant", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ChoiceId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("QuestionID")
                        .HasColumnType("uuid");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("patools.Models.Answer", b =>
                {
                    b.HasOne("patools.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID");

                    b.HasOne("patools.Models.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewID");

                    b.HasOne("patools.Models.Submission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionID");

                    b.Navigation("Question");

                    b.Navigation("Review");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("patools.Models.Course", b =>
                {
                    b.HasOne("patools.Models.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherID");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("patools.Models.CourseUser", b =>
                {
                    b.HasOne("patools.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID");

                    b.HasOne("patools.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("patools.Models.Expert", b =>
                {
                    b.HasOne("patools.Models.PeeringTask", "PeeringTask")
                        .WithMany()
                        .HasForeignKey("PeeringTaskID");

                    b.HasOne("patools.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("PeeringTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("patools.Models.GroupUser", b =>
                {
                    b.HasOne("patools.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("patools.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID");

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("patools.Models.PeeringTask", b =>
                {
                    b.HasOne("patools.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("patools.Models.PeeringTaskUser", b =>
                {
                    b.HasOne("patools.Models.PeeringTask", "PeeringTask")
                        .WithMany()
                        .HasForeignKey("PeeringTaskID");

                    b.HasOne("patools.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID");

                    b.Navigation("PeeringTask");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("patools.Models.Question", b =>
                {
                    b.HasOne("patools.Models.PeeringTask", "PeeringTask")
                        .WithMany()
                        .HasForeignKey("PeeringTaskID");

                    b.Navigation("PeeringTask");
                });

            modelBuilder.Entity("patools.Models.Review", b =>
                {
                    b.HasOne("patools.Models.SubmissionPeer", "SubmissionPeerAssignment")
                        .WithMany()
                        .HasForeignKey("SubmissionPeerAssignmentID");

                    b.Navigation("SubmissionPeerAssignment");
                });

            modelBuilder.Entity("patools.Models.Submission", b =>
                {
                    b.HasOne("patools.Models.PeeringTaskUser", "PeeringTaskUserAssignment")
                        .WithMany()
                        .HasForeignKey("PeeringTaskUserAssignmentID");

                    b.Navigation("PeeringTaskUserAssignment");
                });

            modelBuilder.Entity("patools.Models.SubmissionPeer", b =>
                {
                    b.HasOne("patools.Models.User", "Peer")
                        .WithMany()
                        .HasForeignKey("PeerID");

                    b.HasOne("patools.Models.Submission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionID");

                    b.Navigation("Peer");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("patools.Models.Variant", b =>
                {
                    b.HasOne("patools.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID");

                    b.Navigation("Question");
                });
#pragma warning restore 612, 618
        }
    }
}
